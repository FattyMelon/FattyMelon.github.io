<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Simon&#39; Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fattymelon.github.io/"/>
  <updated>2017-06-07T12:53:33.000Z</updated>
  <id>https://fattymelon.github.io/</id>
  
  <author>
    <name>Simon chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>explicit构造函数的作用</title>
    <link href="https://fattymelon.github.io/2017/06/06/explicit_function/"/>
    <id>https://fattymelon.github.io/2017/06/06/explicit_function/</id>
    <published>2017-06-06T11:02:21.000Z</published>
    <updated>2017-06-07T12:53:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文通过几个例子解释了explicit关键字在构造函数中的作用。</p>
<a id="more"></a>
<h3 id="1-构造函数的隐式转换"><a href="#1-构造函数的隐式转换" class="headerlink" title="1. 构造函数的隐式转换"></a>1. 构造函数的隐式转换</h3><p>C++的默认规定，如果构造函数只接受一个实参，则它实际上定义了转换为此类型的隐式转换机制。（但是只允许一步类类型转换）</p>
<pre><code class="C++">// C++ Primer
class Sales_data {
    Sales_data(string s) {}
}

void func(Sales_data a);

int main() {
    Sales_data test(&quot;999999&quot;);  // 编译通过，&quot;999999&quot;隐式转换为string，再调用构造函数

    func(&quot;999999&quot;);     // 编译错误，
                        // 1)把&quot;999999&quot;转化为string
                        // 2)把临时string转为Sales_data

    func(string(&quot;999999&quot;)); // 编译通过，这里把string隐式转换为了Sales_data
}
</code></pre>
<h3 id="2-隐式转换的坑"><a href="#2-隐式转换的坑" class="headerlink" title="2. 隐式转换的坑"></a>2. 隐式转换的坑</h3><p>假设我们要实现一个复数类，然后我们定义了一个Complex类</p>
<pre><code class="C++">#include &lt;iostream&gt;

using namespace std;

class Complex
{
private:
    double real;
    double imag;

public:
    // Default constructor
    Complex(double r = 0.0, double i = 0.0) : real(r), imag(i) {}

    // A method to compare two Complex numbers
    bool operator == (Complex rhs) {
       return (real == rhs.real &amp;&amp; imag == rhs.imag)? true : false;
    }
};

int main()
{
    // a Complex object
    Complex com1(3.0, 0.0);

    if (com1 == 3.0)
       cout &lt;&lt; &quot;Same&quot;;
    else
       cout &lt;&lt; &quot;Not Same&quot;;
     return 0;
}

// 结果输出Same
</code></pre>
<p>很明显，com1 == 3.0此处发生了一次隐式转换，然后3.0转换为了Complex(3.0, 0.0)所以最后输出了Same。</p>
<h3 id="3-explicit作用"><a href="#3-explicit作用" class="headerlink" title="3. explicit作用"></a>3. explicit作用</h3><p>如果我们想避开这个坑，那就用explicit来抑制构造函数的隐式转换。</p>
<pre><code class="c++">class Complex
{
private:
    double real;
    double imag;

public:
    // Default constructor
    explicit Complex(double r = 0.0, double i = 0.0) : real(r), imag(i) {}

    // A method to compare two Complex numbers
    bool operator== (Complex rhs) {
       return (real == rhs.real &amp;&amp; imag == rhs.imag)? true : false;
    }
};
</code></pre>
<p>此时，结果输出的是Not Same。</p>
<h3 id="4-其他例子"><a href="#4-其他例子" class="headerlink" title="4.其他例子"></a>4.其他例子</h3><pre><code class="c++">class String {
    String(int n) {} //本意是预先分配n个字节给字符串
    String(const char* p) {} // 用C风格的字符串p作为初始化值
}
</code></pre>
<p>下面两种写法比较正常：<br>String s2(10);      //OK 分配10个字节的空字符串<br>String s3 = String(10);     //OK 分配10个字节的空字符串</p>
<p>下面两种写法就比较疑惑了：<br>String s4 = 10;  //编译通过，也是分配10个字节的空字符串<br>String s5 = ‘a’;  //编译通过，分配int(‘a’)个字节的空字符串</p>
<p>s4 和s5 分别把一个int型和char型，隐式转换成了分配若干字节的空字符串，容易令人误解。<br>为了避免这种错误的发生，我们可以声明显示的转换，使用explicit 关键字：</p>
<pre><code class="c++">class String {
    explicit String(int n) {} //预先分配n个字节给字符串
    String(const char* p) {} // 用C风格的字符串p作为初始化值
}
</code></pre>
<p>加上explicit，就抑制了String(int n)的隐式转换，</p>
<p>下面两种写法仍然正确：<br>String s2 (10);   //OK 分配10个字节的空字符串</p>
<p>下面两种写法就不允许了：<br>String s4 = 10; //编译不通过，不允许隐式的转换<br>String s5 = ‘a’; //编译不通过，不允许隐式的转换</p>
<p><strong>所以，explicit可以有效地防止构造函数的隐式转换带来的错误和误解</strong></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol>
<li>C++ Primer</li>
<li><a href="http://www.geeksforgeeks.org/g-fact-93/" target="_blank" rel="external">http://www.geeksforgeeks.org/g-fact-93/</a></li>
<li><a href="http://www.cnblogs.com/cutepig/archive/2009/01/14/1375917.html" target="_blank" rel="external">http://www.cnblogs.com/cutepig/archive/2009/01/14/1375917.html</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文通过几个例子解释了explicit关键字在构造函数中的作用。&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="https://fattymelon.github.io/categories/C/"/>
    
    
      <category term="构造函数" scheme="https://fattymelon.github.io/tags/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Hexo接入Gitment评论</title>
    <link href="https://fattymelon.github.io/2017/05/24/hexo_access/"/>
    <id>https://fattymelon.github.io/2017/05/24/hexo_access/</id>
    <published>2017-05-24T02:59:21.000Z</published>
    <updated>2017-05-25T11:50:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>做好博客之后想添加评论功能。第三方评论有多说，disqus，网易云跟帖等，但是多说即将关闭，disqus好不容易弄好，老是加载不出来，网易嘛，他申请的时候域名github.io已经被占用就不行了。所以就接入了国内大神做的<a href="https://github.com/imsun/gitment" target="_blank" rel="external">Gitment</a></p>
<a id="more"></a>
<h2 id="Gitment"><a href="#Gitment" class="headerlink" title="Gitment"></a>Gitment</h2><h3 id="1-注册-OAuth-Application"><a href="#1-注册-OAuth-Application" class="headerlink" title="1. 注册 OAuth Application"></a>1. 注册 OAuth Application</h3><p><a href="https://github.com/settings/applications/new" target="_blank" rel="external">点击此处</a>注册一个Oauth Application，其他信息可以随意，但是确保填入正确的 callback URL（一般是评论页面对应的域名，图中写的是xxxx.github.io）<br><div class="figure " style="width:600px;"><a class="fancybox" href="./Oauth.png" title="注册网站填写信息" data-fancybox-group=""><img class="fig-img" src="./Oauth.png" style="width:600px;" alt="注册网站填写信息"></a><span class="caption">注册网站填写信息</span></div><div style="clear:both;"></div></p>
<p>注册完成后会得到一个client id和client secret</p>
<h3 id="2-接入-Gitment"><a href="#2-接入-Gitment" class="headerlink" title="2. 接入 Gitment"></a>2. 接入 Gitment</h3><p>根据备注把内容填好，并将代码放入评论页面<br><strong>这里最重要的是repo，很多人不知道应该填什么，如果你用的是github page，那你只需要把xxxx改成你自己的name就好</strong></p>
<pre><code class="javascript">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;https://imsun.github.io/gitment/style/default.css&quot;&gt;
&lt;script src=&quot;https://imsun.github.io/gitment/dist/gitment.browser.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
var gitment = new Gitment({
  owner: &#39;xxxx&#39;, //github name,必须是注册时候的名字，就是下面这一行的xxxx
  repo: &#39;xxxx.github.io&#39;, //存储评论的repositories 名字
  oauth: {
    client_id: &#39;你的 client ID&#39;,
    client_secret: &#39;你的 client secret&#39;,
  },
})
gitment.render(&#39;container&#39;)
&lt;/script&gt;
</code></pre>
<h3 id="3-初始化"><a href="#3-初始化" class="headerlink" title="3. 初始化"></a>3. 初始化</h3><p>配置好以后，会在你的页面看到一个初始化按钮。<br><div class="figure " style="width:600px;"><a class="fancybox" href="./comment.png" title="" data-fancybox-group=""><img class="fig-img" src="./comment.png" style="width:600px;" alt=""></a></div><div style="clear:both;"></div></p>
<p>点击之后会在你的repo的issues页面下创建对应的issue.<br><div class="figure " style="width:600px;"><a class="fancybox" href="./issue.png" title="" data-fancybox-group=""><img class="fig-img" src="./issue.png" style="width:600px;" alt=""></a></div><div style="clear:both;"></div></p>
<h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h3><p>测试的话直接就可以在博客底下评论啦。哈哈哈哈</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做好博客之后想添加评论功能。第三方评论有多说，disqus，网易云跟帖等，但是多说即将关闭，disqus好不容易弄好，老是加载不出来，网易嘛，他申请的时候域名github.io已经被占用就不行了。所以就接入了国内大神做的&lt;a href=&quot;https://github.com/imsun/gitment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gitment&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://fattymelon.github.io/categories/hexo/"/>
    
    
      <category term="gitment" scheme="https://fattymelon.github.io/tags/gitment/"/>
    
      <category term="hexo" scheme="https://fattymelon.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>smallpt详解(三)</title>
    <link href="https://fattymelon.github.io/2017/04/25/raytracing3/"/>
    <id>https://fattymelon.github.io/2017/04/25/raytracing3/</id>
    <published>2017-04-25T06:26:55.000Z</published>
    <updated>2017-05-25T12:34:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要对smallpt的光线跟踪函数进行详细的解释</p>
<a id="more"></a>
<h2 id="1-光线跟踪详细解释"><a href="#1-光线跟踪详细解释" class="headerlink" title="1. 光线跟踪详细解释"></a>1. 光线跟踪详细解释</h2><p>计算法向量，计算折射光线，反射光线等，可以查阅《3D数学基础，图形与游戏开发》</p>
<h3 id="1-1-计算部分"><a href="#1-1-计算部分" class="headerlink" title="1.1 计算部分"></a>1.1 计算部分</h3><pre><code class="c">Vec radiance(const Ray &amp;r, int depth, unsigned short *Xi) {
    double t;                               // 与射线相交物体的距离
    int id = 0;                               // 与射线相交物体的id
    if (!intersect(r, t, id)) 
        return Vec(); // 如果都没有相交，则返回emisson(0, 0, 0)
    const Sphere &amp;obj = spheres[id];        // the hit object 
    Vec x = r.o + r.d*t, n = (x - obj.position).norm(); // 计算n,球面法向量
    Vec nl = n.dot(r.d) &lt; 0 ? n : n*-1, f = obj.color;
    double p = f.x&gt;f.y &amp;&amp; f.x&gt;f.z ? f.x : f.y&gt;f.z ? f.y : f.z; // 找出最大的值
    if (++depth&gt;5||!p) 
        if (erand48(Xi)&lt;p) 
            f = f*(1 / p); //假设f为(0.5, 0.2, 0.2)，那么作者假定这个表面的反射率为f*(1/0.5)，也就是颜色值最大的反射率最高(1, 0.4, 0.4)
        else  
            return obj.emission; 
    // ...
}
</code></pre>
<h3 id="1-2-漫反射"><a href="#1-2-漫反射" class="headerlink" title="1.2 漫反射"></a>1.2 漫反射</h3><pre><code class="c">if (obj.refl == DIFF) {                  // 如果物体的反射属性是漫反射 
    double r1 = 2 * M_PI*erand48(Xi), r2 = erand48(Xi), r2s = sqrt(r2); //取随机数
    Vec w = nl, u = ((fabs(w.x)&gt;.1 ? Vec(0, 1) : Vec(1)).cross(w)).norm(), v = w.cross(u);  //w，v，u为正交基
    Vec d = (u*cos(r1)*r2s + v*sin(r1)*r2s + w*sqrt(1 - r2)).norm(); //求得一个随机的漫反射光线，继续迭代
    return obj.emission + f.mult(radiance(Ray(x, d), depth, Xi));
}
</code></pre>
<h3 id="1-3-镜面反射光"><a href="#1-3-镜面反射光" class="headerlink" title="1.3 镜面反射光"></a>1.3 镜面反射光</h3><pre><code class="c++">else if (obj.refl == SPEC)            // 如果物体的反射属性是漫反射 
    return obj.emission + f.mult(radiance(Ray(x, r.d - n * 2 * n.dot(r.d)), depth, Xi)); //这个比较简单，只要求得反射光的角度即可
</code></pre>
<h3 id="1-4-折射加反射"><a href="#1-4-折射加反射" class="headerlink" title="1.4 折射加反射"></a>1.4 折射加反射</h3><pre><code class="c++">else {
    Ray reflRay(x, r.d - n * 2 * n.dot(r.d));     // 由平行四边形的方法求得反射光的direction
    bool into = n.dot(nl)&gt;0;                // 判断光线是否是进入球体
    double nc = 1, nt = 1.5, nnt = into ? nc / nt : nt / nc, ddn = r.d.dot(nl), cos2t;
    if ((cos2t = 1 - nnt*nnt*(1 - ddn*ddn))&lt;0)    // 如果求得cos2t&lt;0，就没必要进行折射了。
        return obj.emission + f.mult(radiance(reflRay, depth, Xi));
    Vec tdir = (r.d*nnt - n*((into ? 1 : -1)*(ddn*nnt + sqrt(cos2t)))).norm(); //折射角的角度
    double a = nt - nc, b = nt + nc, R0 = a*a / (b*b), c = 1 - (into ? -ddn : tdir.dot(n));
    double Re = R0 + (1 - R0)*c*c*c*c*c, Tr = 1 - Re, P = .25 + .5*Re, RP = Re / P, TP = Tr / (1 - P);
    return obj.emission + f.mult(depth&gt;2 ? (erand48(Xi)&lt;P ?   // 轮盘赌
        radiance(reflRay, depth, Xi)*RP : radiance(Ray(x, tdir), depth, Xi)*TP) :
        radiance(reflRay, depth, Xi)*Re + radiance(Ray(x, tdir), depth, Xi)*Tr);
}
</code></pre>
<h2 id="2-加烟雾效果"><a href="#2-加烟雾效果" class="headerlink" title="2 加烟雾效果"></a>2 加烟雾效果</h2><p>学习完smallpt之后，看到图形学的书上提到了烟雾效果。<br><img src="http://img.blog.csdn.net/20170408210135631?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTM4MDg4MDMwNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>编程实现</p>
<pre><code class="c">#define E_MATH       2.71828
Vector frog_color(0.7, 0.7, 0.7);

inline double f_atmo(double distance) {
    return pow(E_MATH, -(0.01 * 0.01* distance * distance));
}
</code></pre>
<pre><code class="c">// 然后修改光线反射，折射中的代码
// 在这个实现中，我只在第一层的递归加了烟雾效果
// 修改漫反射的代码
if (depth &lt;= 1) {
    double fTemp = f_atmo(distance);
    return obj._emission + (radiance(Ray(hit_point, direct), depth)) * fTemp + frog_color*(1 - fTemp);
}
else 
    return obj._emission + f.mult(radiance(Ray(hit_point, direct), depth));

// 修改反射
if (depth &lt;= 1) {
    double fTemp = f_atmo(distance);
        return obj._emission + (radiance(Ray(hit_point, direct_refl), depth)) * fTemp + frog_color*(1 - fTemp);
    }
else
    return obj._emission + radiance(Ray(hit_point, direct_refl), depth);

// 修改折射
double fTemp = f_atmo(distance);
    return ((radiance(ray_refl, depth) * Fe
                + radiance(ray_refr, depth) * Fr))*fTemp + frog_color*(1 - fTemp);
</code></pre>
<p>效果图1，无烟雾</p>
<p><img src="http://img.blog.csdn.net/20170408210727109?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTM4MDg4MDMwNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>效果图2，加烟雾，可以看出后面那个大球的轮廓。感觉像现在中国最流行的雾霾。 :D<br><img src="http://img.blog.csdn.net/20170408210736953?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTM4MDg4MDMwNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要对smallpt的光线跟踪函数进行详细的解释&lt;/p&gt;
    
    </summary>
    
      <category term="光线跟踪" scheme="https://fattymelon.github.io/categories/%E5%85%89%E7%BA%BF%E8%B7%9F%E8%B8%AA/"/>
    
    
  </entry>
  
  <entry>
    <title>smallpt详解(二)</title>
    <link href="https://fattymelon.github.io/2017/04/22/raytracing2/"/>
    <id>https://fattymelon.github.io/2017/04/22/raytracing2/</id>
    <published>2017-04-22T06:26:55.000Z</published>
    <updated>2017-05-25T13:36:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要说一下自己的理解，<br>关于smallpt的cx,cy是怎么来的，是用来做什么的？</p>
<a id="more"></a>
<h2 id="1-透视投影的原理"><a href="#1-透视投影的原理" class="headerlink" title="1. 透视投影的原理"></a>1. 透视投影的原理</h2><p><img src="http://img.blog.csdn.net/20170408195926856?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTM4MDg4MDMwNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>如果是小孔成像的话，我们应该是投影在z=-d的平面上，但是这样做涉及到负值操作，还使图像反了。如果我们将投影平面移到z = d，这样做就可以避免负值问题。（但是有个问题就是，物体在摄像机和z=d平面之间的物体，电脑就无法绘制了）</p>
<h2 id="2-cx和cy的定义"><a href="#2-cx和cy的定义" class="headerlink" title="2. cx和cy的定义"></a>2. cx和cy的定义</h2><p><img src="http://img.blog.csdn.net/20170408180858973?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTM4MDg4MDMwNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>及计算光线d的代码</p>
<pre><code class="c">Vec d = cx*(((sx + .5 + dx) / 2 + x) / w - .5) +
            cy*(((sy + .5 + dy) / 2 + y) / h - .5) + cam.d;
</code></pre>
<p>其中sx,sy是[0,1]，dx,dy的范围是[-1,1]，dx,dy的分布函数<br><img src="http://img.blog.csdn.net/20170408200506124?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTM4MDg4MDMwNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>所以(sx + .5 + dx) / 2这个的值得范围是[-0.25, 0.75]。这个值主要是为了在随机采样时，对x进行偏移。我们如果把他忽略不计。<br>那么(((sx + .5 + dx) / 2 + x) / w - .5)的值其实是在[-0.5, 0.5]的。<br>当x = w-1, y = 0时，<br>(0.5 <em> cx)+(-0.5 </em> cy)+cam.d是为了计算最大角度的射出光线。</p>
<p>图例1， 如果我们的cx = (w / h)<br><img src="http://img.blog.csdn.net/20170408200023623?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTM4MDg4MDMwNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>图例2， 如果我们的cx = (w/h *0.5135)，我们的最大角度肯定比图例1小。<br><img src="http://img.blog.csdn.net/20170408200032935?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTM4MDg4MDMwNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h3 id="3-验证结果"><a href="#3-验证结果" class="headerlink" title="3. 验证结果"></a>3. 验证结果</h3><p>我的理解是：<br>0.5135这个参数就是为了设置视角大小的。<br>作者计算好了角度之后，才这样设置的。</p>
<p>例子1</p>
<pre><code class="c">double testVal = 1.0;
double cx = Vec(w * testVal / h), cy = (cx.cross(cam.d)).norm() * testVal;
</code></pre>
<p><img src="http://img.blog.csdn.net/20170408202111900?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTM4MDg4MDMwNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>例子2</p>
<pre><code class="c">double testVal = 0.5135;
double cx = Vec(w * testVal / h), cy = (cx.cross(cam.d)).norm() * testVal;
</code></pre>
<p><img src="http://img.blog.csdn.net/20170408202302541?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTM4MDg4MDMwNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>例子3</p>
<pre><code class="c">double testVal = 0.2;
double cx = Vec(w * testVal / h), cy = (cx.cross(cam.d)).norm() * testVal;
</code></pre>
<p><img src="http://img.blog.csdn.net/20170408202608815?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTM4MDg4MDMwNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要说一下自己的理解，&lt;br&gt;关于smallpt的cx,cy是怎么来的，是用来做什么的？&lt;/p&gt;
    
    </summary>
    
      <category term="光线跟踪" scheme="https://fattymelon.github.io/categories/%E5%85%89%E7%BA%BF%E8%B7%9F%E8%B8%AA/"/>
    
    
  </entry>
  
  <entry>
    <title>smallpt详解(一)</title>
    <link href="https://fattymelon.github.io/2017/04/20/raytracing1/"/>
    <id>https://fattymelon.github.io/2017/04/20/raytracing1/</id>
    <published>2017-04-20T06:26:55.000Z</published>
    <updated>2017-05-25T13:36:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要是为了记录我学习smallpt的过程。第一部分是关于整个程序的大致分解。第二部分主要说一下我对main函数中cx和cy的理解。第三部分主要说明光线跟踪的每一行代码所用到的数学知识。</p>
<a id="more"></a>
<h2 id="1-基本功能函数"><a href="#1-基本功能函数" class="headerlink" title="1. 基本功能函数"></a>1. 基本功能函数</h2><h3 id="1-1-随机函数"><a href="#1-1-随机函数" class="headerlink" title="1.1 随机函数"></a>1.1 随机函数</h3><pre><code class="c">#include &lt;math.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;

#define M_PI 3.1415

double erand48(unsigned short xsubi[3]) {
    return (double)rand() / (double)RAND_MAX;
}
</code></pre>
<p>erand48()函数是linux下的随机函数，可以取[0, 1]的随机浮点数，在windows下必须自己写一个类似功能的函数。</p>
<pre><code class="c">inline double clamp(double x) { return x &lt; 0 ? 0 : x &gt; 1 ? 1 : x; }

inline int toInt(double x) { return int(pow(clamp(x), 1 / 2.2) * 255 + .5); }    //四舍五入
</code></pre>
<p>这里的难点在于为什么要用pow(clamp(x), 1/ 2.2)，查了资料才知道是gamma校正方法，详情可以看<br><a href="http://blog.csdn.net/candycat1992/article/details/46228771" target="_blank" rel="external">http://blog.csdn.net/candycat1992/article/details/46228771</a></p>
<h3 id="1-2-Vec类"><a href="#1-2-Vec类" class="headerlink" title="1.2 Vec类"></a>1.2 Vec类</h3><pre><code class="c">struct Vec
{
    double x, y, z;
    Vec(double x_ = 0, double y_ = 0, double z_ = 0) : x(x_), y(y_), z(z_) {}
    Vec operator+(const Vec&amp; rhs) const {
        return Vec(x + rhs.x, y + rhs.y, z + rhs.z);
    }
    Vec operator-(const Vec&amp; rhs) const {
        return Vec(x - rhs.x, y - rhs.y, z - rhs.z);
    }
    Vec operator*(double b) const {
        return Vec(x * b, y * b, z * b);
    }
    Vec mult(const Vec &amp;rhs) const {
        return Vec(x * rhs.x, y * rhs.y, z * rhs.z);
    }
    double dot(const Vec &amp;rhs) const { return x*rhs.x + y*rhs.y + z*rhs.z; }
    Vec cross(const Vec &amp;rhs) {
        return Vec(y * rhs.z - z * rhs.y,
            z * rhs.x - x * rhs.z,
            x * rhs.y - y * rhs.x);
    }
    Vec&amp; norm() { return *this = *this * (1 / sqrt(x*x + y*y + z*z)); }
}
</code></pre>
<p>1) 其中包括向量加减，数乘，标准化，点乘，叉乘，还有需要注意的mult函数，后来会提到。<br>2) 这个Vec类在之后的计算中既可以表达向量Vector，亦可以表达三维点Point，也用来保存颜色RGB的值。</p>
<h3 id="1-3-Ray类"><a href="#1-3-Ray类" class="headerlink" title="1.3 Ray类"></a>1.3 Ray类</h3><pre><code class="c">struct Ray 
{
    Vec o, d;    // o is original point, d is direction of lighting
    Ray(Vec o_, Vec d_) : o(o_), d(d_) {}
};
</code></pre>
<p>射线方程，o是射线的起点，d代表方向</p>
<h3 id="1-4-Sphere类"><a href="#1-4-Sphere类" class="headerlink" title="1.4 Sphere类"></a>1.4 Sphere类</h3><pre><code class="c">enum Refl_t { DIFF, SPEC, REFR};

struct Sphere
{
    double rad;    // radius
    Vec position, emission, color;
    Refl_t refl;

    Sphere(double rad_, Vec p_, Vec e_, Vec c_, Refl_t refl_) :
        rad(rad_), position(p_), emission(e_), color(c_), refl(refl_) {}
    double intersect(const Ray &amp;r) const {    // return distance, 0 if nohit
        Vec op = position - r.o;
        double t, eps = 1e-4;
        double b = op.dot(r.d), det = b*b + rad*rad - op.dot(op);
        if (det &lt; 0)    
            return 0;
        else    
            det = sqrt(det);
        return (t = b - det) &gt; eps ? t : ((t = b + det) &gt; eps ? t : 0);
    }
};
</code></pre>
<p>射线和球体/圆，求交原理图：</p>
<p><img src="http://img.blog.csdn.net/20170408164053927?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTM4MDg4MDMwNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>求交的基本原理就是将射线的参数方程代入到圆的函数中，求t的值。<br>1）将P(t) = O + tD 代入圆方程，会得到 t 的一元二次方程。<br>2）先求出Vec op，op是用球心p的坐标减去射线的起点，表示原理图中的(O - C)。<br>3）b = op.dot(r.d)指代 “ D * (O - C) “<br>4）求det，这里要注意我们求的b和原理图中的b差了两倍，所以可以直接用</p>
<pre><code class="c">double det = b * b - op.dot(op) + rad * rad;
</code></pre>
<p>如果det&lt;0说明无解，直接return 0。<br>否则求根号的det<br>5）最终的解有一个或两个，可能在 t = b - det，或者t = b + det中，选择t大于0并且两个中较小的t。</p>
<hr>
<p><img src="http://img.blog.csdn.net/20170408170258582?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTM4MDg4MDMwNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h2 id="2-绘制过程"><a href="#2-绘制过程" class="headerlink" title="2. 绘制过程"></a>2. 绘制过程</h2><h3 id="2-1-放置球的位置"><a href="#2-1-放置球的位置" class="headerlink" title="2.1 放置球的位置"></a>2.1 放置球的位置</h3><pre><code class="c">Sphere spheres[] = {
    Sphere(1e5, Vec(1e5 + 1, 40.8, 81.6), Vec(), Vec(.75, .25, .25), Refl_t::DIFF),    //left
    Sphere(1e5, Vec(-1e5 + 99,40.8,81.6),Vec(),Vec(.25,.25,.75), Refl_t::DIFF),//Rght 
    Sphere(1e5, Vec(50,40.8, 1e5),     Vec(),Vec(.75,.75,.75), Refl_t::DIFF),//Back 
    Sphere(1e5, Vec(50,40.8,-1e5 + 170), Vec(),Vec(),           Refl_t::DIFF),//Frnt 
    Sphere(1e5, Vec(50, 1e5, 81.6),    Vec(),Vec(.75,.75,.75),Refl_t::DIFF),//Botm 
    Sphere(1e5, Vec(50,-1e5 + 81.6,81.6),Vec(),Vec(.75,.75,.75),Refl_t::DIFF),//Top 
    Sphere(16.5,Vec(27,16.5,47),       Vec(),Vec(1,1,1)*.999, Refl_t::SPEC),//Mirr 
    Sphere(16.5,Vec(73,16.5,78),       Vec(),Vec(1,1,1)*.999, Refl_t::REFR),//Glas 
    Sphere(600, Vec(50,681.6 - .27,81.6),Vec(12,12,12),  Vec(), Refl_t::DIFF) //Lite 
};
</code></pre>
<p>1）用6个很大的球体当做平面（DIFF属性，只有漫反射），因为半径很大的话，你在近距离看起来，球面就很像一个平面。<br>作者这样做应该是为了避免去写平面求交，平面类等函数。<br>2）用1个球表示光源，就是Lite，1个Mirr球（完全反射），1个Glass球（折射和反射都有）</p>
<h3 id="2-2-遍历所有的球，求交点"><a href="#2-2-遍历所有的球，求交点" class="headerlink" title="2.2 遍历所有的球，求交点"></a>2.2 遍历所有的球，求交点</h3><pre><code class="c">inline bool intersect(const Ray &amp;r, double &amp;t, int &amp;id) {
    double n = sizeof(spheres) / sizeof(Sphere), d, inf = t = 1e20;
    for (int i = int(n); i--;) {
        if ((d = spheres[i].intersect(r)) &amp;&amp; d &lt; t) 
        {
            t = d;
            id = i;
        }
    }
    return t &lt; inf;
}
</code></pre>
<p>此光线射出去，在所有的球体中求交点。<br>求出距离camera最近的交点，这就是待会要绘制在屏幕上的主要的点。</p>
<h3 id="2-3-main函数"><a href="#2-3-main函数" class="headerlink" title="2.3 main函数"></a>2.3 main函数</h3><p>1）camera的位置是在（50， 52， 295.6）， 往z轴的负方向看。</p>
<pre><code class="java">int main(int argc, char *argv[])
{
    int w = 1024, h = 768, samps = argc == 2 ? atoi(argv[1]) / 4 : 10; // # samples 
    Ray cam(Vec(50, 52, 295.6), Vec(0, -0.042612, -1).norm()); // cam pos, dir 
    Vec cx = Vec(w*.5135 / h), cy = (cx.cross(cam.d)).norm()*.5135, r, *c = new Vec[w*h];
    // ...
}
</code></pre>
<p>2）遍历每个像素点，用随机采样的方式求得要射出的光线的方向d。</p>
<pre><code class="c">for (int y = 0; y&lt;h; y++) {                       // Loop over image rows
    fprintf(stderr, &quot;\rRendering (%d spp) %5.2f%%&quot;, samps * 4, 100.*y / (h - 1));
    for (unsigned short x = 0, Xi[3] = { 0,0,y*y*y }; x&lt;w; x++)   // Loop cols 
        for (int sy = 0, i = (h - y - 1)*w + x; sy&lt;2; sy++)     // 2x2 subpixel rows 
            for (int sx = 0; sx&lt;2; sx++, r = Vec()) {        // 2x2 subpixel cols 
                for (int s = 0; s&lt;samps; s++) {
                    double r1 = 2 * erand48(Xi), dx = r1&lt;1 ? sqrt(r1) - 1 : 1 - sqrt(2 - r1);
                    double r2 = 2 * erand48(Xi), dy = r2&lt;1 ? sqrt(r2) - 1 : 1 - sqrt(2 - r2);
                    Vec d = cx*(((sx + .5 + dx) / 2 + x) / w - .5) +
                            cy*(((sy + .5 + dy) / 2 + y) / h - .5) + cam.d;
                    r = r + radiance(Ray(cam.o + d * 140, d.norm()), 0, Xi)*(1. / samps);
                } // Camera rays are pushed ^^^^^ forward to start in interior 
                c[i] = c[i] + Vec(clamp(r.x), clamp(r.y), clamp(r.z))*.25;
            }
}
FILE *f = fopen(&quot;image.ppm&quot;, &quot;w&quot;);         // Write image to PPM file. 
fprintf(f, &quot;P3\n%d %d\n%d\n&quot;, w, h, 255);
for (int i = 0; i&lt;w*h; i++)
    fprintf(f, &quot;%d %d %d &quot;, toInt(c[i].x), toInt(c[i].y), toInt(c[i].z));
</code></pre>
<h3 id="2-4-光线跟踪递归函数"><a href="#2-4-光线跟踪递归函数" class="headerlink" title="2.4 光线跟踪递归函数"></a>2.4 光线跟踪递归函数</h3><p>radiance函数在第二部分介绍。<br>以下是大致的分块。</p>
<p>1)判断是否相交，求交点，求表面法向</p>
<pre><code class="c">Vec radiance(const Ray &amp;r, int depth, unsigned short *Xi) {
    double t;                               // distance to intersection 
    int id = 0;                               // id of intersected object 
    if (!intersect(r, t, id)) 
        return Vec(); // if miss, return black 
    const Sphere &amp;obj = spheres[id];        // the hit object 
    Vec x = r.o + r.d*t, n = (x - obj.position).norm();    // calculate vector n,球面法向量
    Vec nl = n.dot(r.d) &lt; 0 ? n : n*-1, f = obj.color;
    double p = f.x&gt;f.y &amp;&amp; f.x&gt;f.z ? f.x : f.y&gt;f.z ? f.y : f.z; // max refl 
    if (++depth&gt;5||!p) 
        if (erand48(Xi)&lt;p) 
            f = f*(1 / p); 
        else  
            return obj.emission; 
    // ...
}
</code></pre>
<p>2）漫反射（DIFF）<br>如果材质是漫反射，那么就随机生成一个方向进行漫反射。</p>
<pre><code class="c">if (obj.refl == DIFF) {                  // Ideal DIFFUSE reflection 
    double r1 = 2 * M_PI*erand48(Xi), r2 = erand48(Xi), r2s = sqrt(r2);
    Vec w = nl, u = ((fabs(w.x)&gt;.1 ? Vec(0, 1) : Vec(1)).cross(w)).norm(), v = w.cross(u);    //w，v，u为正交基
    Vec d = (u*cos(r1)*r2s + v*sin(r1)*r2s + w*sqrt(1 - r2)).norm();
    return obj.emission + f.mult(radiance(Ray(x, d), depth, Xi));
}
</code></pre>
<p>3）镜面反射（材质为SPEC）<br>计算镜面反射的方向，然后继续递归</p>
<pre><code class="c">else if (obj.refl == SPEC)            // Ideal SPECULAR reflection 
    return obj.emission + f.mult(radiance(Ray(x, r.d - n * 2 * n.dot(r.d)), depth, Xi));
</code></pre>
<p>4）反射和折射（材质为REFR）<br>玻璃材质，有一部分光进行反射，有一部分光进行折射。<br>这里用到了轮盘赌方法。</p>
<pre><code class="c">else {
    Ray reflRay(x, r.d - n * 2 * n.dot(r.d));     // Ideal dielectric REFRACTION 由平行四边形的方法求得反射光的direction
    bool into = n.dot(nl)&gt;0;                // Ray from outside going in? 
    double nc = 1, nt = 1.5, nnt = into ? nc / nt : nt / nc, ddn = r.d.dot(nl), cos2t;
    if ((cos2t = 1 - nnt*nnt*(1 - ddn*ddn))&lt;0)    // Total internal reflection 
        return obj.emission + f.mult(radiance(reflRay, depth, Xi));
    Vec tdir = (r.d*nnt - n*((into ? 1 : -1)*(ddn*nnt + sqrt(cos2t)))).norm();
    double a = nt - nc, b = nt + nc, R0 = a*a / (b*b), c = 1 - (into ? -ddn : tdir.dot(n));
    double Re = R0 + (1 - R0)*c*c*c*c*c, Tr = 1 - Re, P = .25 + .5*Re, RP = Re / P, TP = Tr / (1 - P);
    return obj.emission + f.mult(depth&gt;2 ? (erand48(Xi)&lt;P ?   // Russian roulette 
        radiance(reflRay, depth, Xi)*RP : radiance(Ray(x, tdir), depth, Xi)*TP) :
        radiance(reflRay, depth, Xi)*Re + radiance(Ray(x, tdir), depth, Xi)*Tr);
}
</code></pre>
<hr>
<p>参考链接：<br>[1]<a href="https://drive.google.com/file/d/0B8g97JkuSSBwUENiWTJXeGtTOHFmSm51UC01YWtCZw/view" target="_blank" rel="external">https://drive.google.com/file/d/0B8g97JkuSSBwUENiWTJXeGtTOHFmSm51UC01YWtCZw/view</a></p>
<p>[2]<a href="http://www.kevinbeason.com/smallpt/#moreinfo" target="_blank" rel="external">http://www.kevinbeason.com/smallpt/#moreinfo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要是为了记录我学习smallpt的过程。第一部分是关于整个程序的大致分解。第二部分主要说一下我对main函数中cx和cy的理解。第三部分主要说明光线跟踪的每一行代码所用到的数学知识。&lt;/p&gt;
    
    </summary>
    
      <category term="光线跟踪" scheme="https://fattymelon.github.io/categories/%E5%85%89%E7%BA%BF%E8%B7%9F%E8%B8%AA/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://fattymelon.github.io/2017/03/20/hello-world/"/>
    <id>https://fattymelon.github.io/2017/03/20/hello-world/</id>
    <published>2017-03-20T06:26:55.000Z</published>
    <updated>2017-05-25T06:56:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<!-- toc -->
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
<h3 id="Highlight-Text"><a href="#Highlight-Text" class="headerlink" title="Highlight Text"></a>Highlight Text</h3><p>test <span class="highlight-text danger">your highlighted text</span>. Does it work?   





test <span class="highlight-text yellow">your highlighted text</span>. Does it work?</p>
<h3 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h3><div class="figure right fig-75" style="width:;"><a class="fancybox" href="http://st.gde-fon.com/wallpapers_original/542985_reka_kolumbiya_shtat_vashington_peyzaj_4684x3025_www.Gde-Fon.com.jpg" title="" data-fancybox-group="" target="_blank" rel="external"><img class="fig-img" src="http://st.gde-fon.com/wallpapers_original/542985_reka_kolumbiya_shtat_vashington_peyzaj_4684x3025_www.Gde-Fon.com.jpg" alt=""></a></div>
<div class="figure right fig-25" style="width:;"><a class="fancybox" href="http://img.tuku.com/upload/attach/2013/07/98031-9wo1TE2.jpg" title="" data-fancybox-group="" target="_blank" rel="external"><img class="fig-img" src="http://img.tuku.com/upload/attach/2013/07/98031-9wo1TE2.jpg" alt=""></a></div>  
<div class="figure right fig-25" style="width:;"><a class="fancybox" href="http://pic1.win4000.com/wallpaper/c/5716f22b06e93.jpg" title="" data-fancybox-group="" target="_blank" rel="external"><img class="fig-img" src="http://pic1.win4000.com/wallpaper/c/5716f22b06e93.jpg" alt=""></a></div>
<div class="figure right fig-25" style="width:;"><a class="fancybox" href="http://desk.fd.zol-img.com.cn/t_s960x600c5/g5/M00/02/01/ChMkJ1bKxJuIC9j4AA0ddWOyVH8AALHJgNVISwADR2N309.jpg" title="" data-fancybox-group="" target="_blank" rel="external"><img class="fig-img" src="http://desk.fd.zol-img.com.cn/t_s960x600c5/g5/M00/02/01/ChMkJ1bKxJuIC9j4AA0ddWOyVH8AALHJgNVISwADR2N309.jpg" alt=""></a></div>
<div class="figure " style="width:;"><a class="fancybox" href="http://www.timelinecoverphotomaker.com/sites/default/files/facebook-cover-photos/2013/07/beautiful-sunshine-facebook-cover-photo.jpg" title="A beautiful sunrise" data-fancybox-group="" target="_blank" rel="external"><img class="fig-img" src="http://www.timelinecoverphotomaker.com/sites/default/files/facebook-cover-photos/2013/07/beautiful-sunshine-facebook-cover-photo.jpg" alt="A beautiful sunrise"></a><span class="caption">A beautiful sunrise</span></div><div style="clear:both;"></div>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="codeblock codeblock--tabbed"><figcaption><a href="http://example.com" target="_blank" rel="external">example</a><ul class="tabs"><li class="tab active">c</li><li class="tab">js</li><li class="tab">css</li></ul></figcaption><div class="tabs-content"><pre style="display: block;"><code>int main() {
    int i = 0;
    for (; i &lt; 10; ++i) {
        test;
    }
}</code></pre><pre style="display: none;"><code>var test = 'test';</code></pre><pre style="display: none;"><code>.btn {
  color: red;
}</code></pre></div></figure>
<h3 id="video"><a href="#video" class="headerlink" title="video"></a>video</h3><div class="video-container"><iframe src="//www.youtube.com/embed/EKyirtVHsK0" frameborder="0" allowfullscreen></iframe></div>
<h3 id="Wide-image"><a href="#Wide-image" class="headerlink" title="Wide image"></a>Wide image</h3><!-- endcontent --><div class="figure figure--fullWidth"><img class="figure-img" src="http://www.timelinecoverphotomaker.com/sites/default/files/facebook-cover-photos/2013/07/beautiful-sunshine-facebook-cover-photo.jpg" alt="A beautiful sunrise"><span class="caption">A beautiful sunrise</span></div><!-- content -->
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
